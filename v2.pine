// @version=5
indicator("Fair Value Gap + Imbalance", shorttitle="FVG+Imbalance", overlay=true)

// Parameters
lookback = input.int(30, "Ilość FVG wstecz", minval=1, maxval=100)
bullColor = input.color(color.green, "Kolor byczych FVG", group="Kolory")
bearColor = input.color(color.red, "Kolor niedźwiedzich FVG", group="Kolory")
imbalanceColor = input.color(color.blue, "Kolor imbalance", group="Kolory")
transparencyFVG = input.int(70, "Przezroczystość FVG", minval=0, maxval=100, group="Wygląd")
lineWidth = input.int(1, "Szerokość linii", minval=1, maxval=4, group="Wygląd")

// Store FVG type
type FVG
    int candle_idx
    float top
    float bottom
    bool isBull
    bool isImbalance

// Global vars
var bullFVGs = array.new<FVG>()
var bearFVGs = array.new<FVG>()
var imbalanceFVGs = array.new<FVG>()
var lastBullCandle = 0
var lastBearCandle = 0
var lastImbalanceCandle = 0

// Check duplicates
isDuplicate(newCandle, isBull, isImbalance) =>
    if isImbalance
        math.abs(newCandle - lastImbalanceCandle) <= 1
    else if isBull
        math.abs(newCandle - lastBullCandle) <= 1
    else
        math.abs(newCandle - lastBearCandle) <= 1

// Detect both FVG and Imbalance
detectFVG() =>
    bullDetected = false
    bearDetected = false
    imbalanceDetected = false
    bullCandle = 0
    bearCandle = 0
    imbalanceCandle = 0
    bullTop = 0.0
    bullBottom = 0.0
    bearTop = 0.0
    bearBottom = 0.0
    imbalanceTop = 0.0
    imbalanceBottom = 0.0

    if high[2] < low[0]
        bullDetected := true
        bullCandle := bar_index - 1
        bullTop := low[0]
        bullBottom := high[2]


    // if low[0] > high[2]  // Basic bullish FVG condition
    //     bullDetected := true
    //     bullCandle := bar_index - 1
    //     bullTop := low[0]
    //     bullBottom := high[2]
    
        
    if low[2] > high[0]  // Basic bearish FVG condition
        bearDetected := true
        bearCandle := bar_index - 1
        bearTop := low[2]
        bearBottom := high[0]
    
    // Imbalance detection (price gap)
    if low > high[1]
        imbalanceDetected := true
        imbalanceCandle := bar_index
        imbalanceTop := low
        imbalanceBottom := high[1]
    
    if high < low[1]
        imbalanceDetected := true
        imbalanceCandle := bar_index
        imbalanceTop := low[1]
        imbalanceBottom := high
    
    [bullDetected, bearDetected, imbalanceDetected, bullCandle, bearCandle, imbalanceCandle, bullTop, bullBottom, bearTop, bearBottom, imbalanceTop, imbalanceBottom]

// Clean old FVGs
cleanupFVGs() =>
    while array.size(bullFVGs) > lookback
        array.shift(bullFVGs)
    
    while array.size(bearFVGs) > lookback
        array.shift(bearFVGs)
    
    while array.size(imbalanceFVGs) > lookback
        array.shift(imbalanceFVGs)

// Run detection
[bullDetected, bearDetected, imbalanceDetected, bullCandle, bearCandle, imbalanceCandle, bullTop, bullBottom, bearTop, bearBottom, imbalanceTop, imbalanceBottom] = detectFVG()

// Add new FVGs
if bullDetected and not isDuplicate(bullCandle, true, false)
    newBullFVG = FVG.new(bullCandle, bullTop, bullBottom, true, false)
    array.push(bullFVGs, newBullFVG)
    lastBullCandle := bullCandle

if bearDetected and not isDuplicate(bearCandle, false, false)
    newBearFVG = FVG.new(bearCandle, bearTop, bearBottom, false, false)
    array.push(bearFVGs, newBearFVG)
    lastBearCandle := bearCandle

if imbalanceDetected and not isDuplicate(imbalanceCandle, false, true)
    newImbalanceFVG = FVG.new(imbalanceCandle, imbalanceTop, imbalanceBottom, imbalanceTop > imbalanceBottom, true)
    array.push(imbalanceFVGs, newImbalanceFVG)
    lastImbalanceCandle := imbalanceCandle

cleanupFVGs()

// Drawing
if barstate.islast
    for i = 0 to array.size(bullFVGs) - 1
        fvg = array.get(bullFVGs, i)
        // Debug print
        label.new(bar_index, high, "Drawing Bull FVG at " + str.tostring(fvg.candle_idx), color=color.blue)
        boxColor = color.new(bullColor, transparencyFVG)
        box.new(fvg.candle_idx, fvg.top, fvg.candle_idx + 2, fvg.bottom, bgcolor=boxColor, border_color=bullColor, border_width=lineWidth)
    
    // Draw bearish FVG
    for i = 0 to array.size(bearFVGs) - 1
        fvg = array.get(bearFVGs, i)
        boxColor = color.new(bearColor, transparencyFVG)
        box.new(fvg.candle_idx, fvg.top, fvg.candle_idx + 2, fvg.bottom, bgcolor=boxColor, border_color=bearColor, border_width=lineWidth)
    
    // Draw imbalances
    for i = 0 to array.size(imbalanceFVGs) - 1
        fvg = array.get(imbalanceFVGs, i)
        boxColor = color.new(imbalanceColor, transparencyFVG)
        box.new(fvg.candle_idx, fvg.top, fvg.candle_idx + 1, fvg.bottom, bgcolor=boxColor, border_color=imbalanceColor, border_width=lineWidth)